/* eslint-disable */

/**
 * https://github.com/axieinfinity/mavis-documentation/blob/main/docs/api/web3/openapi/web3-api.yaml
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface Paths {
    "/accounts/{address}/activities/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search for matched account activities
         * @description Get an account's activities on the Ronin chain (Transfers, Approvals, Mint, Burn, Marketplace, Swap, Deposit, Staking, Add/Remove Liquidity).
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account address. Example: 0xf6fd5fca4bd769ba495b29b98dba5f2ecf4ceed3 */
                    address: string;
                };
                cookie?: never;
            };
            /** @description Request body */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AccountActivitySearchRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                items?: components["schemas"]["accountActivity"][];
                                paging?: {
                                    nextCursor?: string;
                                };
                            };
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{address}/nfts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get owned NFTs of an address */
        get: {
            parameters: {
                query?: {
                    /** @description Paging limit */
                    limit?: number;
                    /** @description Paging cursor */
                    cursor?: string;
                };
                header?: never;
                path: {
                    /** @description Account address. Example: 0xf6fd5fca4bd769ba495b29b98dba5f2ecf4ceed3 */
                    address: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                items?: components["schemas"]["AccountNFTResponse"][];
                                paging?: {
                                    nextCursor?: string;
                                };
                            };
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{address}/fungible_tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get fungible token balances of an address, including the native token (RON) */
        get: {
            parameters: {
                query?: {
                    /** @description Paging limit */
                    limit?: number;
                    /** @description Paging cursor */
                    cursor?: string;
                };
                header?: never;
                path: {
                    /** @description Account address. Example: 0xf6fd5fca4bd769ba495b29b98dba5f2ecf4ceed3 */
                    address: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                items?: components["schemas"]["AccountCollectionResponse"][];
                                paging?: {
                                    nextCursor?: string;
                                };
                            };
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{address}/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of collections having NFTs belonging to an address */
        get: {
            parameters: {
                query?: {
                    /** @description Paging limit */
                    limit?: number;
                    /** @description Paging cursor */
                    cursor?: string;
                };
                header?: never;
                path: {
                    /** @description Account address. Example: 0xf6fd5fca4bd769ba495b29b98dba5f2ecf4ceed3 */
                    address: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                items?: components["schemas"]["AccountCollectionResponse"][];
                                paging?: {
                                    nextCursor?: string;
                                };
                            };
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{address}/contracts/{contractAddress}/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get NFT list of an address and contract */
        get: {
            parameters: {
                query?: {
                    /** @description Paging limit */
                    limit?: number;
                    /** @description Paging cursor */
                    cursor?: string;
                };
                header?: never;
                path: {
                    /** @description Account address. Example: 0xf6fd5fca4bd769ba495b29b98dba5f2ecf4ceed3 */
                    address: string;
                    /** @description ContractAddress address. Example: 0x32950db2a7164ae833121501c797d79e7b79d74c */
                    contractAddress: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                items?: components["schemas"]["AccountCollectionResponse"][];
                                paging?: {
                                    nextCursor?: string;
                                };
                            };
                        };
                    };
                };
                /** @description not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{address}/contracts/{contractAddress}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get balance of an address and contract */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account address. Example: 0xf6fd5fca4bd769ba495b29b98dba5f2ecf4ceed3 */
                    address: string;
                    /** @description ContractAddress address. Example: 0x32950db2a7164ae833121501c797d79e7b79d74c */
                    contractAddress: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: components["schemas"]["AccountCollectionResponse"];
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{address}/contracts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get balances of an address by multiple contracts */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account address. Example: 0xf6fd5fca4bd769ba495b29b98dba5f2ecf4ceed3 */
                    address: string;
                };
                cookie?: never;
            };
            /** @description Request body */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CollectionIdsRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                items?: components["schemas"]["AccountCollectionResponse"][];
                            };
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{address}/tokens/transfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get token transfers of an address */
        get: {
            parameters: {
                query?: {
                    /** @description Paging limit */
                    limit?: number;
                    /** @description Paging cursor */
                    cursor?: string;
                };
                header?: never;
                path: {
                    /** @description Account address. Example: 0xf6fd5fca4bd769ba495b29b98dba5f2ecf4ceed3 */
                    address: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                items?: components["schemas"]["TokenTransferResponse"][];
                                paging?: {
                                    nextCursor?: string;
                                };
                            };
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{address}/tokens/{contractAddress}/transfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get token transfers of an address with a contract */
        get: {
            parameters: {
                query?: {
                    /** @description Paging limit */
                    limit?: number;
                    /** @description Paging cursor */
                    cursor?: string;
                };
                header?: never;
                path: {
                    /** @description Account address. Example: 0xf6fd5fca4bd769ba495b29b98dba5f2ecf4ceed3 */
                    address: string;
                    /** @description ContractAddress address. Example: 0x32950db2a7164ae833121501c797d79e7b79d74c */
                    contractAddress: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                items?: components["schemas"]["TokenTransferResponse"][];
                                paging?: {
                                    nextCursor?: string;
                                };
                            };
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{address}/txs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get transactions of an address */
        get: {
            parameters: {
                query?: {
                    /** @description Paging limit */
                    limit?: number;
                    /** @description Paging cursor */
                    cursor?: string;
                };
                header?: never;
                path: {
                    /** @description Account address. Example: 0xf6fd5fca4bd769ba495b29b98dba5f2ecf4ceed3 */
                    address: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                items?: components["schemas"]["TxResponse"][];
                                paging?: {
                                    nextCursor?: string;
                                };
                            };
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{address}/internal_txs/transfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get internal tx transfers
         * @description Retrieve internal RON token transfers triggered by smart contract interactions (OpCode CALL) for a given address.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Paging limit */
                    limit?: number;
                    /** @description Paging cursor */
                    cursor?: string;
                };
                header?: never;
                path: {
                    /** @description Account address. Example: 0xf6fd5fca4bd769ba495b29b98dba5f2ecf4ceed3 */
                    address: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                items?: components["schemas"]["InternalTxResponse"][];
                                paging?: {
                                    nextCursor?: string;
                                };
                            };
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blocks/finalized/number": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get finalized block number */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: components["schemas"]["BlockNumberResponse"];
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blocks/latest/number": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get latest block number */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: components["schemas"]["BlockNumberResponse"];
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blocks/{blockNumber}/txs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get transactions by block number */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Block Number */
                    blockNumber: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                items?: components["schemas"]["TxResponse"][];
                            };
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blocks/{blockNumber}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get block by number */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Block Number */
                    blockNumber: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: components["schemas"]["BlockResponse"];
                        };
                    };
                };
                /** @description not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blocks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get block by hash, timestamp, block number range */
        get: {
            parameters: {
                query?: {
                    /** @description Block hash */
                    hash?: string;
                    /** @description Block timestamp, get the block where it life span covers the input timestamp */
                    timestamp?: number;
                    /** @description Start block number, required if toBlock is present */
                    fromBlock?: number;
                    /** @description End block number, required if fromBlock is present */
                    toBlock?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: components["schemas"]["BlockResponse"] | {
                                items?: components["schemas"]["BlockResponse"];
                            };
                        };
                    };
                };
                /** @description not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collections/{contractAddress}/tokens/{tokenId}/owners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get owners of an NFT */
        get: {
            parameters: {
                query?: {
                    /** @description Paging limit */
                    limit?: number;
                    /** @description Paging cursor */
                    cursor?: string;
                };
                header?: never;
                path: {
                    /** @description ContractAddress address. Example: 0x32950db2a7164ae833121501c797d79e7b79d74c */
                    contractAddress: string;
                    /** @description TokenId */
                    tokenId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                items?: components["schemas"]["NFTOwnerResponse"][];
                                paging?: {
                                    nextCursor?: string;
                                };
                            };
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collections/{contractAddress}/tokens/{tokenId}/transfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get token transfers of an NFT */
        get: {
            parameters: {
                query?: {
                    /** @description Paging limit */
                    limit?: number;
                    /** @description Paging cursor */
                    cursor?: string;
                };
                header?: never;
                path: {
                    /** @description ContractAddress address. Example: 0x32950db2a7164ae833121501c797d79e7b79d74c */
                    contractAddress: string;
                    /** @description TokenId */
                    tokenId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                items?: components["schemas"]["TokenTransferResponse"][];
                                paging?: {
                                    nextCursor?: string;
                                };
                            };
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collections/{contractAddress}/tokens/{tokenId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get detail of an NFT */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ContractAddress address. Example: 0x32950db2a7164ae833121501c797d79e7b79d74c */
                    contractAddress: string;
                    /** @description TokenId */
                    tokenId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: components["schemas"]["NFTResponse"];
                        };
                    };
                };
                /** @description not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collections/{contractAddress}/tokens/metadata/refresh_sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh NFTs of a collection in synchronous manner */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ContractAddress address. Example: 0x32950db2a7164ae833121501c797d79e7b79d74c */
                    contractAddress: string;
                };
                cookie?: never;
            };
            /** @description Request body */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TokenIdsRefreshRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: components["schemas"]["RefreshResultResponse"];
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collections/{contractAddress}/tokens/metadata/refresh_async": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh NFTs of a collection in asynchronous manner */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ContractAddress address. Example: 0x32950db2a7164ae833121501c797d79e7b79d74c */
                    contractAddress: string;
                };
                cookie?: never;
            };
            /** @description Request body */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TokenIdsRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: string;
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collections/{contractAddress}/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get NFTs from a collection */
        get: {
            parameters: {
                query?: {
                    /** @description Paging limit */
                    limit?: number;
                    /** @description Paging cursor */
                    cursor?: string;
                };
                header?: never;
                path: {
                    /** @description ContractAddress address. Example: 0x32950db2a7164ae833121501c797d79e7b79d74c */
                    contractAddress: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                items?: components["schemas"]["NFTResponse"][];
                                paging?: {
                                    nextCursor?: string;
                                };
                            };
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Get details of multiple NFTs */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ContractAddress address. Example: 0x32950db2a7164ae833121501c797d79e7b79d74c */
                    contractAddress: string;
                };
                cookie?: never;
            };
            /** @description Request body */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TokenIdsRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                items?: components["schemas"]["NFTResponse"][];
                            };
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collections/{contractAddress}/owners/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the number of collection holdings by address */
        get: {
            parameters: {
                query?: {
                    /** @description Paging limit */
                    limit?: number;
                    /** @description Paging cursor */
                    cursor?: string;
                };
                header?: never;
                path: {
                    /** @description ContractAddress address. Example: 0x32950db2a7164ae833121501c797d79e7b79d74c */
                    contractAddress: string;
                    /** @description Account address. Example: 0xf6fd5fca4bd769ba495b29b98dba5f2ecf4ceed3 */
                    address: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: components["schemas"]["CollectionOwnerResponse"];
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collections/{contractAddress}/owners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get collection holder list */
        get: {
            parameters: {
                query?: {
                    /** @description Paging limit */
                    limit?: number;
                    /** @description Paging cursor */
                    cursor?: string;
                };
                header?: never;
                path: {
                    /** @description ContractAddress address. Example: 0x32950db2a7164ae833121501c797d79e7b79d74c */
                    contractAddress: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                items?: components["schemas"]["CollectionOwnerResponse"][];
                                paging?: {
                                    nextCursor?: string;
                                };
                            };
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collections/{contractAddress}/transfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get collection token transfers */
        get: {
            parameters: {
                query?: {
                    /** @description Paging limit */
                    limit?: number;
                    /** @description Paging order, valid values: "asc", "desc". Default: "desc" */
                    order?: string;
                    /** @description Paging cursor */
                    cursor?: string;
                };
                header?: never;
                path: {
                    /** @description ContractAddress address. Example: 0x32950db2a7164ae833121501c797d79e7b79d74c */
                    contractAddress: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                items?: components["schemas"]["TokenTransferResponse"][];
                                paging?: {
                                    nextCursor?: string;
                                };
                            };
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collections/{contractAddress}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get collection detail */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ContractAddress address. Example: 0x32950db2a7164ae833121501c797d79e7b79d74c */
                    contractAddress: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: components["schemas"]["CollectionResponse"];
                        };
                    };
                };
                /** @description not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get details of multiple collections */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Request body */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CollectionIdsRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                items?: components["schemas"]["CollectionResponse"][];
                            };
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contracts/{contractAddress}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get detail of a contract */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ContractAddress address. Example: 0x32950db2a7164ae833121501c797d79e7b79d74c */
                    contractAddress: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: components["schemas"]["ContractResponse"];
                        };
                    };
                };
                /** @description not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contracts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get details of multiple contracts */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Request body */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CollectionIdsRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                items?: components["schemas"]["ContractResponse"][];
                            };
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/txs/{txHash}/internal_txs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get internal transaction of a transaction */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Transaction hash */
                    txHash: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                items?: components["schemas"]["InternalTxResponse"][];
                            };
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/txs/{txHash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get detail of a transaction */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Transaction hash */
                    txHash: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: components["schemas"]["InternalTxResponse"];
                        };
                    };
                };
                /** @description not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/txs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get details of multiple transactions */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Request body */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TxHashesRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                items?: components["schemas"]["TxResponse"][];
                            };
                        };
                    };
                };
                /** @description internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ErrorResponse: {
            errorCode?: number;
            message?: string;
        };
        AccountCollectionResponse: {
            contractAddress?: string;
            name?: string;
            symbol?: string;
            standard?: string;
            balance?: string;
            decimals?: number;
            tokenCount?: number;
            metadata?: Record<string, never>;
        };
        AccountNFTResponse: {
            contractAddress?: string;
            tokenId?: string;
            balance?: string;
            name?: string;
            symbol?: string;
            standard?: string;
            tokenUri?: string;
            metadata?: Record<string, never>;
        };
        AccountActivitySearchRequest: {
            fromBlock?: number;
            toBlock?: number;
            /** @example [
             *       "ContractInteraction",
             *       "RONTransfer",
             *       "ScatterDisperse",
             *       "Transfer",
             *       "KatanaSwap",
             *       "Stake",
             *       "Mint",
             *       "Approve",
             *       "ContractCreation",
             *       "ClaimRewards",
             *       "KatanaAddLiquidity",
             *       "Unstake",
             *       "Restake",
             *       "Withdraw",
             *       "KatanaRemoveLiquidity",
             *       "Burn",
             *       "Deposit",
             *       "StakeRewards"
             *     ] */
            activityTypes?: string[];
            limit?: string;
            cursor?: string;
        };
        accountActivity: {
            address?: string;
            blockNumber?: number;
            txIndex?: number;
            txHash?: string;
            activity?: string;
            blockTime?: number;
            details?: components["schemas"]["activityDetails"];
        };
        activityDetails: {
            contract?: components["schemas"]["ContractResponse"];
            sends?: components["schemas"]["activityTransfer"][];
            receives?: components["schemas"]["activityTransfer"][];
            approvals?: components["schemas"]["activityApproval"][];
            orders?: components["schemas"]["orderInfo"][];
        };
        activityTransfer: {
            from?: string;
            to?: string;
            amount?: string;
            tokenId?: string;
            token?: components["schemas"]["activityToken"];
        };
        activityToken: {
            contractAddress?: string;
            name?: string;
            symbol?: string;
            standard?: string;
            decimals?: string;
        };
        activityApproval: {
            owner?: string;
            spender?: string;
            amount?: string;
            tokenId?: string;
            isAll?: boolean;
            token?: components["schemas"]["activityToken"];
        };
        orderInfo: {
            maker?: string;
            taker?: string;
            price?: string;
            paymentToken?: components["schemas"]["activityToken"];
            assets?: components["schemas"]["orderAsset"][];
        };
        orderAsset: {
            tokenStandard?: string;
            address?: components["schemas"]["activityToken"];
            tokenId?: string;
            amount?: string;
        };
        BlockNumberResponse: {
            blockNumber?: number;
        };
        BlockResponse: {
            hash?: string;
            number?: number;
            parentHash?: string;
            transactions?: string[];
            nonce?: number;
            mixHash?: string;
            logsBloom?: string;
            stateRoot?: string;
            transactionsRoot?: string;
            receiptsRoot?: string;
            coinbase?: string;
            difficulty?: number;
            totalDifficulty?: number;
            extraData?: string;
            size?: number;
            gasLimit?: number;
            gasUsed?: number;
            baseFeePerGas?: string;
            timestamp?: number;
        };
        NFTOwnerResponse: {
            address?: string;
            balance?: string;
        };
        CollectionOwnerResponse: {
            address?: string;
            balance?: string;
            tokenCount?: number;
        };
        RefreshResultResponse: {
            successes?: string[];
            failures?: string[];
        };
        TokenIdsRequest: {
            tokenIds?: string[];
        };
        TokenIdsRefreshRequest: {
            /** @description unit: milliseconds, when maxWait exceeds server timeout, then server timeout will be used instead */
            maxWait?: number;
            tokenIds?: string[];
        };
        CollectionResponse: {
            contractAddress?: string;
            name?: string;
            symbol?: string;
            standard?: string;
            totalSupply?: string;
            totalOwners?: number;
            totalTransfers?: number;
            metadata?: Record<string, never>;
        };
        CollectionIdsRequest: {
            contractAddresses?: string[];
        };
        ContractResponse: {
            address?: string;
            name?: string;
            symbol?: string;
            standard?: string;
            creator?: string;
            createdAtBlock?: number;
            verifiedName?: string;
            verifiedSymbol?: string;
            verifiedStandard?: string;
        };
        InternalTxResponse: {
            transactionHash?: string;
            order?: number;
            opcode?: string;
            type?: string;
            value?: string;
            input?: string;
            from?: string;
            to?: string;
            success?: boolean;
            error?: string;
            blockNumber?: number;
            blockHash?: string;
            blockTime?: number;
        };
        NFTResponse: {
            tokenId?: string;
            contractAddress?: string;
            name?: string;
            symbol?: string;
            standard?: string;
            tokenUri?: string;
            metadata?: Record<string, never>;
        };
        TokenTransferSearchRequest: {
            from?: string;
            to?: string;
            relateTo?: string;
            contractAddress?: string;
            fromBlock?: string;
            toBlock?: string;
            tokenStandards?: string[];
            limit?: number;
            cursor?: string;
        };
        TokenTransferResponse: {
            blockNumber?: number;
            logIndex?: number;
            tokenId?: string;
            contractAddress?: string;
            tokenStandard?: string;
            tokenName?: string;
            tokenSymbol?: string;
            decimals?: number;
            from?: string;
            to?: string;
            value?: string;
            blockHash?: string;
            transactionHash?: string;
            blockTime?: number;
        };
        TxHashesRequest: {
            hashes?: string[];
        };
        TxSearchRequest: {
            from?: string;
            to?: string;
            contractAddress?: string;
            payer?: string;
            relateTo?: string;
            fromBlock?: string;
            toBlock?: string;
            txActions?: string[];
            limit?: number;
            cursor?: string;
        };
        TxResponse: {
            transactionHash?: string;
            transactionIndex?: number;
            blockHash?: string;
            blockNumber?: number;
            from?: string;
            to?: string;
            contractAddress?: string;
            status?: number;
            gas?: number;
            gasPrice?: string;
            effectiveGasPrice?: string;
            gasUsed?: number;
            cumulativeGasUsed?: number;
            logsBloom?: string;
            input?: string;
            nonce?: number;
            value?: string;
            type?: number;
            v?: string;
            r?: string;
            s?: string;
            blockTime?: number;
            chainId?: string;
            maxFeePerGas?: string;
            maxPriorityFeePerGas?: string;
            payer?: string;
            payerV?: string;
            payerR?: string;
            payerS?: string;
            expiredTime?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
